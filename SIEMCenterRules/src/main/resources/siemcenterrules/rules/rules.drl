package siemcenterrules.rules;

import java.util.List;
import java.time.LocalDateTime;
import com.securityoperationscenter.siemcenter.model.Account;
import com.securityoperationscenter.siemcenter.model.RiskLevel;
import com.securityoperationscenter.siemcenter.model.Alarm;
import com.securityoperationscenter.siemcenter.model.Log;
import com.securityoperationscenter.siemcenter.model.ErrorLog;
import com.securityoperationscenter.siemcenter.model.LoginLog;
import com.securityoperationscenter.siemcenter.model.PaymentLog;
import com.securityoperationscenter.siemcenter.model.AntivirusThreatDetectionLog;
import com.securityoperationscenter.siemcenter.SIEMCenterService;

global List maliciousIpAddresses;
global SIEMCenterService siemCenterService;

rule "Detect when ErrorLog appears"
    when
       ErrorLog()
    then
      System.out.println("RULE FIRED: Detect when ErrorLog appears.");
end

rule "Detect malicious ip address"
    when
        Log(machine.ip memberOf maliciousIpAddresses)
    then
        System.out.println("RULE FIRED: Detect malicious ip address.");
end

rule "Fire payment system alarm"
	when
        $log: PaymentLog($username: username, $timestamp: timestamp)
        not PaymentLog(username == $username , timestamp.isAfter($timestamp))

        Number(intValue >= 50) from accumulate(
            $paymentLogs: PaymentLog(
                username == $username,
                timestamp.isAfter(LocalDateTime.now().minusSeconds(60))
            ),
            count($paymentLogs)
        )
	then
		Alarm alarm = new Alarm("PAYMENT", "Payment system alarm!", $username, LocalDateTime.now());
        siemCenterService.saveAlarm(alarm); // comment for tests
        insert(alarm);
end

rule "Set account risk level to low when no alarm in past 90 days"
   no-loop
   when
       $account: Account($username: username)

       not Alarm(
           username == $username,
           timestamp.isAfter(LocalDateTime.now().minusDays(90))
       )
   then
       modify($account) {
           setRiskLevel(RiskLevel.LOW);
       }

       System.out.println("RULE FIRED: Set account risk level to low when no alarm in past 90 days for user: " + $username + ".");
end

rule "3 unsuccessful logins with the same username"
    when
        $log: LoginLog(successful != true, $username: username, $timestamp: timestamp)
        not LoginLog(successful != true, username == $username , timestamp.isAfter($timestamp))

        Number(intValue >= 2) from accumulate(
            $logs: LoginLog(
                successful != true,
                username == $username
            ),
            count($logs)
        )
    then
        Alarm alarm = new Alarm("THREE_UNSUCCESSFUL_LOGINS", "Three unsuccessful logins alarm!", $username, LocalDateTime.now());
        siemCenterService.saveAlarm(alarm); // comment for tests
        insert(alarm);
end
